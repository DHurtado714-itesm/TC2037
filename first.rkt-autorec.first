#lang racket

;; Author: Daniel Hurtado
;; Session 1


;; Definir una funcion

(define a 5)

;; Suma de un var

(define fn1
  (lambda (x)
    (+ x 5)))

;; Suma de 2 var

(define fn2
  (lambda (x y)
    (+ x y)))

;; Funcion que genera funciones

(define fn3
  (lambda (x)
    (lambda (y)
      (+ x y))))

;; Suma de cuadrados

(define sum-of-squares
  (lambda (x y)
    (+ (* x x) (* y y))))


;; Area del disco

(define area-of-disk
  (lambda (radius)
    (* 3.1415 radius radius)))

;; Area de un anillo

(define area-of-ring
  (lambda (outer inner)
    (- (area-of-disk outer)
       (area-of-disk inner))))

;; Wage number number ->  number

(define wage
  (lambda (payment hours)
    (* payment hours)))
;; (wage 12 2) -> 24
(wage 12 2)


;; Tax: number number -> number

(define tax
  (lambda (wage rate)
    (* wage rate)))
;;(tax 100 0.15) -> 15
;;(tax 100 0.15)


;; Netpay: number number number -> number

(define netpay
  (lambda (payment hours rate)
    (- (wage payment hours)
       (tax (wage payment hours) rate))))
;; (netpay 12 40 0.15) -> 408
;; (netpay 12 40 0.15)


;; Maximun: number number -> number

(define maximum
  (lambda (number number)
    (cond
      [(> a b) a]
      [else b])))


;; the interest for $500 or less is $20
;; the interest for $2000 or more is $90
;; the interest for $10.000 or less is $500







